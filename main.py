import telebot
import datetime
import time
import sql_base as sql
import diagram as dia
from telebot import types
import re
import constant as const

bot = telebot.TeleBot(const.token)


# –ü–µ—Ä–∏–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def stat_tipe(tipstat: str):
    tekdat = datetime.date.today()
    tekmoun = tekdat.month
    d1 = 0
    d2 = 0
    textdat = ''
    if tipstat == '1':
        d1 = datetime.date(2022, int(tekmoun - 1), 1)
        d2 = datetime.date(2022, int(tekmoun), 1)
        textdat = '–ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü'
    elif tipstat == '2':
        d1 = datetime.date(2022, int(tekmoun), 1)
        d2 = datetime.date(2022, int(tekmoun + 1), 1)
        textdat = '—Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü'
    elif tipstat == '3':
        tek1 = tekdat - datetime.timedelta(days=7 + tekdat.weekday())
        tek2 = tekdat - datetime.timedelta(days=tekdat.weekday())
        d1 = datetime.date(2022, tek1.month, tek1.day)
        d2 = datetime.date(2022, tek2.month, tek2.day)
        textdat = '–ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é'
    elif tipstat == '4':
        tek1 = tekdat - datetime.timedelta(days=tekdat.weekday())
        tek2 = tekdat + datetime.timedelta(days=7 - tekdat.weekday())
        d1 = datetime.date(2022, tek1.month, tek1.day)
        d2 = datetime.date(2022, tek2.month, tek2.day)
        textdat = '—Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é'
    return d1, d2, textdat


# –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
def test_user(userid: int):
    if userid == 90205749:
        userid = 90205749  # 12345   185983928
    else:
        pass
    return userid


# –û—á–∏—Å—Ç–∫–∞ –æ—Ç —ç–º–æ–¥–∂–∏
def del_emoji(string):
    emoji_pattern = re.compile("["
                               u"\U0001F600-\U0001F64F"  # emoticons
                               u"\U0001F300-\U0001F5FF"  # symbols & pictographs
                               u"\U0001F680-\U0001F6FF"  # transport & map symbols
                               u"\U0001F1E0-\U0001F1FF"  # flags (iOS)
                               u"\U00002702-\U000027B0"
                               u"\U000024C2-\U0001F251"
                               u"\U0001F9FE"
                               "]+", flags=re.UNICODE)
    return emoji_pattern.sub(r'', string)


# –†–∞–∑–±–∏—Ç–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞–≤–Ω—ã–µ —á–µ—Å—Ç–∏
def generator_list(lst, n):
    for i in range(0, len(lst), n):
        yield lst[i: i + n]


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å–ø–∏—Å–∫–∞
def prov_dlin(i, dlin):
    if i < 0:
        i = 0
    elif i > dlin:
        i = dlin
    else:
        i = i
    return i


# –ù–∞–∂–∞–ª–∏ —Å—Ç–∞—Ä—Ç (–û—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ)
@bot.message_handler(commands=['start'])
def start_message(message):
    firstname = message.from_user.first_name
    userid = test_user(message.from_user.id)
    lastname = message.from_user.last_name
    login = message.from_user.username
    # bot.answer_callback_query(message.chat.id, "START!!!")
    print(firstname, userid, lastname, login)
    # {'id': 90205749, 'is_bot': False, 'first_name': 'Andrew', 'username': 'ASveshnikoff', 'last_name': None,
    #  'language_code': 'en', 'can_join_groups': None, 'can_read_all_group_messages': None,
    #  'supports_inline_queries': None, 'is_premium': None, 'added_to_attachment_menu': None}
    if sql.facecontrol(userid) == 0:
        sql.sql_insert_users(userid, firstname, lastname, login)

    glavmess = f'–ü—Ä–∏–≤–µ—Ç, {firstname}! –Ø @YouMoney25 - —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å ' \
               f'—Ç–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã! '
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text='–í–Ω–µ—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥', callback_data='rasx'))
    markup.add(types.InlineKeyboardButton(text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='static'))
    markup.add(types.InlineKeyboardButton(text='–ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='option'))
    markup.add(types.InlineKeyboardButton(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', callback_data='info'))
    bot.send_message(message.chat.id, glavmess, parse_mode='html')
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:', parse_mode='html', reply_markup=markup)


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@bot.callback_query_handler(func=lambda call: call.data.startswith('mainmenu'))
def mainmenu(call):
    mess = '–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:'
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text='–í–Ω–µ—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥', callback_data='rasx'))
    markup.add(types.InlineKeyboardButton(text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='static'))
    markup.add(types.InlineKeyboardButton(text='–ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='option'))
    markup.add(types.InlineKeyboardButton(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', callback_data='info'))
    # markup.add(rasx,stat,option,info)
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=mess,
                          parse_mode='html', reply_markup=markup)


# –í–Ω–µ—Å—Ç–∏ –†–∞—Å—Ö–æ–¥ –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@bot.callback_query_handler(func=lambda call: call.data.startswith('rasx'))
def input_rash(call):
    userid = test_user(call.message.chat.id)
    mess = '–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:'
    cat = sql.sql_takecat_list(userid=userid)
    markup = types.InlineKeyboardMarkup()
    if not cat:
        mess = 'üòî–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!\n' \
               '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤–Ω–µ—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥ –Ω—É–∂–Ω–æ –≤—Å–µ–≥–æ 3 —à–∞–≥–∞:\n' \
               '1. –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n' \
               '2. –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é\n' \
               '3. –í–Ω–µ—Å—Ç–∏ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞'
        markup.add(types.InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', callback_data='newc'))
    else:
        for row in cat:
            markup.add(types.InlineKeyboardButton(text=row[1], callback_data=f'cat__{row[0]}__{row[1]}'))
    back = types.InlineKeyboardButton(text='üîù –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='mainmenu')
    markup.add(back)
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=mess,
                          parse_mode='html', reply_markup=markup)


# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith('static'))
def statistika(call):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text=f'–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü', callback_data=f'stat__1'))
    markup.add(types.InlineKeyboardButton(text=f'–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü', callback_data=f'stat__2'))
    markup.add(types.InlineKeyboardButton(text=f'–ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è', callback_data=f'stat__3'))
    markup.add(types.InlineKeyboardButton(text=f'–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è', callback_data=f'stat__4'))
    markup.add(types.InlineKeyboardButton(text=f'–í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã', callback_data=f'AllRash__0'))
    markup.add(types.InlineKeyboardButton(text='üîù –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data=f'mainmenu'))
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                          text=f'–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥:', parse_mode='html', reply_markup=markup)


# –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
@bot.callback_query_handler(func=lambda call: call.data.startswith('stat__'))
def stat_po_cat(call):
    tipstat = call.data.split("__")
    datestat = stat_tipe(tipstat[1])
    userid = test_user(call.message.chat.id)
    sumcat = sql.sql_takesumcat(userid=userid, d1=str(datestat[0]), d2=str(datestat[1]))
    labels = ()
    sizes = []
    explode = ()
    markup = types.InlineKeyboardMarkup()
    if not sumcat:
        mess = f'–î–∞–Ω–Ω—ã–µ –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º –∑–∞ {datestat[2]} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.\n–î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–Ω–µ—Å–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥.'
        markup.add(types.InlineKeyboardButton(text='–í–Ω–µ—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥', callback_data=f'rasx'))
    else:
        for row in sumcat:
            markup.add(types.InlineKeyboardButton(text=f'{row[1]}: {row[2]} —Ä—É–±',
                                                  callback_data=f'statcat__{row[0]}__{row[1]}__{tipstat[1]}'))
            labels += (del_emoji(row[1]),)
            sizes.append(row[2])
            explode += (0.01,)
        mess = f'–°—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ {datestat[2]}: {sum(sizes)} —Ä—É–±–ª–µ–π.\n–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:'
        dia.circle_diag(userid, labels, sizes, explode, datestat[2])
        img = open(f'{userid}_png.png', 'rb')
        bot.send_photo(call.message.chat.id, img)
    markup.add(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data=f'static'))
    bot.send_message(chat_id=call.message.chat.id,
                     text=mess,
                     parse_mode='html', reply_markup=markup)


# –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
@bot.callback_query_handler(func=lambda call: call.data.startswith('statcat__'))
def stat_po_art(call):
    catl = call.data.split("__")
    datestat = stat_tipe(catl[3])
    mess = f'C—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ {datestat[2]} –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {catl[2]}:'
    userid = test_user(call.message.chat.id)
    art = sql.sql_takesumart_list(userid=userid, cat=catl[1], d1=str(datestat[0]), d2=str(datestat[1]))
    labels = ()
    sizes = []
    explode = ()
    markup = types.InlineKeyboardMarkup()
    for row in art:
        markup.add(types.InlineKeyboardButton(text=f'{row[1]}: {row[2]} —Ä—É–±',
                                              callback_data=f'statart__{row[0]}__{row[1]}__'
                                                            f'{catl[3]}__0__{catl[1]}__{catl[2]}'))
        labels += (row[1],)
        sizes.append(row[2])
        explode += (0.01,)
    print(labels)
    dia.circle_diag(userid, labels, sizes, explode, datestat[2])
    markup.add(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data=f'stat__{catl[3]}'))
    img = open(f'{userid}_png.png', 'rb')
    bot.send_photo(call.message.chat.id, img)
    bot.send_message(chat_id=call.message.chat.id, text=mess, parse_mode='html',
                     reply_markup=markup)


# –í—ã–≤–æ–¥ –ø–µ—Ä–µ—á–Ω—è –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
@bot.callback_query_handler(func=lambda call: call.data.startswith('AllRash__'))
def stat_allrash(call):
    rashcall = call.data.split("__")
    userid = test_user(call.message.chat.id)
    allrash = sql.sql_allrash(userid=userid)
    allrash1 = list(generator_list(allrash, 8))
    i = prov_dlin(int(rashcall[1]), len(allrash1) - 1)
    mess = f'–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤.\n' \
           f'–í—ã–±–µ—Ä–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.'
    markup = types.InlineKeyboardMarkup()
    if len(allrash1) != 1:
        butdown = types.InlineKeyboardButton(text=f'<<<',
                                             callback_data=f'AllRash__{i - 1}')
        butup = types.InlineKeyboardButton(text=f'>>>',
                                           callback_data=f'AllRash__{i + 1}')
        markup.add(butdown, butup)
        mess += f'\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {i + 1} –∏–∑ {len(allrash1)}:'
    for row in allrash1[i]:
        markup.add(types.InlineKeyboardButton(text=f'{row[1]} —Ä—É–±. –æ—Ç {row[2]} {row[4]}/{row[5]}',
                                              callback_data=f'chanoneart__{row[0]}__{row[1]}__{row[2]}'))
    markup.add(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data=f'static'))
    bot.send_message(chat_id=call.message.chat.id, text=mess, parse_mode='html', reply_markup=markup)


# –í—ã–≤–æ–¥ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–¥–Ω–æ–π    ['statart', '1', '–ò–ø–æ—Ç–µ–∫–∞', '1', '1']
@bot.callback_query_handler(func=lambda call: call.data.startswith('statart__'))
def stat_po_oneart(call):
    artone = call.data.split("__")
    datestat = stat_tipe(artone[3])
    userid = test_user(call.message.chat.id)
    oneart = sql.sql_takesumoneart_list(userid=userid, artid=artone[1], d1=str(datestat[0]), d2=str(datestat[1]))
    oneart1 = list(generator_list(oneart, 7))
    i = prov_dlin(int(artone[4]), len(oneart1) - 1)
    mess = f'–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ {datestat[2]} –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {artone[2]}.\n' \
           f'–í—ã–±–µ—Ä–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.'
    markup = types.InlineKeyboardMarkup()
    if len(oneart1) != 1:
        butdown = types.InlineKeyboardButton(text=f'<<<',
                                             callback_data=f'statart__{artone[1]}__{artone[2]}__{artone[3]}__{i - 1}__'
                                                           f'{artone[5]}__{artone[6]}')
        butup = types.InlineKeyboardButton(text=f'>>>',
                                           callback_data=f'statart__{artone[1]}__{artone[2]}__{artone[3]}__{i + 1}__'
                                                         f'{artone[5]}__{artone[6]}')
        markup.add(butdown, butup)
        mess += f'\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {i + 1} –∏–∑ {len(oneart1)}:'
    for row in oneart1[i]:
        if row[3] is None:
            komm = ''
        else:
            komm = f'({row[3]})'
        markup.add(types.InlineKeyboardButton(text=f'{row[1]} —Ä—É–±. –æ—Ç {row[2]} {komm}',
                                              callback_data=f'chanoneart__{row[0]}__{row[1]}__{row[2]}'))
    markup.add(
        types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥',
                                   callback_data=f'statcat__{artone[5]}__{artone[6]}__{artone[3]}'))
    bot.send_message(chat_id=call.message.chat.id, text=mess, parse_mode='html', reply_markup=markup)


# –ö–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ä–∞—Å—Ö–æ–¥–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith('chanoneart__'))
def change_oneart(call):
    oneart = call.data.split("__")
    print(oneart)
    mess = f'–†–∞—Å—Ö–æ–¥ –Ω–∞ {oneart[2]} —Ä—É–±. –æ—Ç {oneart[3]}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:'
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text=f'–ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É', callback_data=f'changesumoneart__{oneart[1]}'))
    markup.add(types.InlineKeyboardButton(text=f'–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', callback_data=f'changekommoneart__{oneart[1]}'))
    markup.add(types.InlineKeyboardButton(text=f'–£–¥–∞–ª–∏—Ç—å', callback_data=f'deletesumoneart__{oneart[1]}'))
    # markup.add(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data=f'statart__1__üè†–ò–ø–æ—Ç–µ–∫–∞__1__1'))
    bot.send_message(chat_id=call.message.chat.id, text=mess, parse_mode='html', reply_markup=markup)
    # –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–∑–∞–¥


# –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞—Å—Ö–æ–¥
@bot.callback_query_handler(func=lambda call: call.data.startswith('deletesumoneart__'))
def delete_oneart(call):
    oneart = call.data.split("__")
    mess = '–†–∞—Å—Ö–æ–¥ —É–¥–∞–ª–µ–Ω!'
    print(oneart)
    userid = test_user(call.message.chat.id)
    sql.sql_deloneart(userid, oneart[1])
    bot.send_message(chat_id=call.message.chat.id, text=mess, parse_mode='html', reply_markup=None)


# –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å—Ö–æ–¥    changekommoneart__
@bot.callback_query_handler(func=lambda call: call.data.startswith('changekommoneart__'))
def changekomm_oneart(call):
    oneart = call.data.split("__")
    mess = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–∞:'
    datt = bot.send_message(call.message.chat.id, mess, parse_mode='html', reply_markup=None)
    bot.register_next_step_handler(datt, sqlchangekomm_oneart, oneart)


def sqlchangekomm_oneart(message, value):
    art = value
    userid = test_user(message.from_user.id)
    kom = message.text
    if message.content_type == 'text':
        sql.sql_changekommoneart(oneart=art[1], userid=userid, komm=kom)
        mess = f'–ò–∑–º–µ–Ω–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞ {kom}'
        bot.send_message(message.from_user.id, mess, reply_markup=None)
    else:
        datt = bot.send_message(message.chat.id, '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–º. –ü–æ–≤—Ç–æ—Ä–∏ –≤–≤–æ–¥:')
        bot.register_next_step_handler(datt, sqlchangekomm_oneart, art)


# –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º—É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å—Ö–æ–¥    sql_deloneart
@bot.callback_query_handler(func=lambda call: call.data.startswith('changesumoneart__'))
def changesumoneart__(call):
    oneart = call.data.split("__")
    mess = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:'
    datt = bot.send_message(call.message.chat.id, mess, parse_mode='html', reply_markup=None)
    bot.register_next_step_handler(datt, sqlchangesumm_oneart, oneart)


def sqlchangesumm_oneart(message, value):
    art = value
    userid = test_user(message.from_user.id)
    summ = message.text
    if message.content_type == 'text' and summ.isdigit() and int(summ) > 0:
        sql.sql_changesummoneart(oneart=art[1], userid=userid, summa=summ)
        mess = f'–ò–∑–º–µ–Ω–∏–ª —Å—É–º–º—É –Ω–∞ {summ} —Ä—É–±.'
        bot.send_message(message.from_user.id, mess, reply_markup=None)
    else:
        datt = bot.send_message(message.chat.id, '–°—É–º–º–∞ –¥–æ–ª–∂–µ–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ 0! –ü–æ–≤—Ç–æ—Ä–∏ –≤–≤–æ–¥:')
        bot.register_next_step_handler(datt, sqlchangesumm_oneart, art)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith('option'))
def option(call):
    glavmess = '–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫:'
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', callback_data='—Åustomiz'))
    # markup.add(types.InlineKeyboardButton(text='–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', callback_data='reminder'))
    markup.add(types.InlineKeyboardButton(text='üîù –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='mainmenu'))
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=glavmess,
                          parse_mode='html', reply_markup=markup)


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith('—Åustomiz'))
def option(call):
    userid = test_user(call.message.chat.id)
    cat = sql.sql_takecat_list(userid=userid)
    markup = types.InlineKeyboardMarkup()
    mess = f'–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:\n‚úè - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å\n‚ùå - —É–¥–∞–ª–∏—Ç—å'
    for row in cat:
        catbut = types.InlineKeyboardButton(text=row[1], callback_data='0')
        changebut = types.InlineKeyboardButton(text='‚úè', callback_data=f'—Åust__chancat__{row[0]}__{row[1]}')
        delbut = types.InlineKeyboardButton(text='‚ùå', callback_data=f'—Åust__dlcat__{row[0]}__{row[1]}')
        markup.add(catbut, changebut, delbut)
    markup.add(types.InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é', callback_data='newc'))
    back = types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='option')
    markup.add(back)
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=mess,
                          parse_mode='html', reply_markup=markup)


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
@bot.callback_query_handler(func=lambda call: call.data.startswith('—Åust__chancat__'))
def cust_change(call):
    cangecat = call.data.split("__")
    print(f'All = {cangecat}')
    mess = f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cangecat[3]}\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π:\n‚úè - –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å\n‚ùå - —É–¥–∞–ª–∏—Ç—å'
    userid = test_user(call.message.chat.id)
    art = sql.sql_takeart_list(userid=userid, cat=cangecat[2])
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text='–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', callback_data=f'renamecat__{cangecat[2]}'))
    for row in art:
        artbut = types.InlineKeyboardButton(text=row[1], callback_data='0')
        changebut = types.InlineKeyboardButton(text='‚úè',
                                               callback_data=f'—Åust__renameart__{row[0]}__{row[1]}__{cangecat[2]}__'
                                                             f'{cangecat[3]}')
        delbut = types.InlineKeyboardButton(text='‚ùå',
                                            callback_data=f'—Åust__delart__{row[0]}__{row[1]}__{cangecat[2]}__'
                                                          f'{cangecat[3]}')
        markup.add(artbut, changebut, delbut)
    markup.add(types.InlineKeyboardButton(text=f'‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é',
                                          callback_data=f'newart__{cangecat[2]}__{cangecat[3]}'))
    back = types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='—Åustomiz')
    markup.add(back)
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=mess,
                          parse_mode='html', reply_markup=markup)


# –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é  all ['—Åust', 'renameart', '12', '–¢–æ–ø–ª–∏–≤–æ', '2', '–ê–≤—Ç–æ–º–æ–±–∏–ª—å']
@bot.callback_query_handler(func=lambda call: call.data.startswith('—Åust__renameart__'))
def rename_art(call):
    art = call.data.split("__")
    mess = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:'
    ctn = bot.send_message(call.message.chat.id, mess, parse_mode='html', reply_markup=None)
    bot.register_next_step_handler(ctn, rename_art_sql, art)


def rename_art_sql(message, value):
    art = value
    if message.content_type == 'text':
        nameart = message.text
        sql.sql_rename_art(nameart=nameart, artid=art[2])
        mess = f'–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ {nameart}\n–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?'
        print(mess)
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é',
                                              callback_data=f'—Åust__chancat__{art[4]}__{art[5]}'))
        markup.add(types.InlineKeyboardButton(text='üîù –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='mainmenu'))
        bot.send_message(message.from_user.id, mess, reply_markup=markup)
    else:
        datt = bot.send_message(message.chat.id, '–ù–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è. –ù–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:')
        bot.register_next_step_handler(datt, rename_art_sql, art)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith('—Åust__delart__'))
def cust_del_art(call):
    delart = call.data.split("__")
    mess = f'–£–¥–∞–ª–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é {delart[3]}?'
    markup = types.InlineKeyboardMarkup()
    da = types.InlineKeyboardButton(text='–î–∞',
                                    callback_data=f'deleteart__{delart[2]}__{delart[3]}__{delart[4]}__{delart[5]}')
    net = types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data=f'—Åust__chancat__{delart[4]}__{delart[5]}')
    markup.add(da, net)
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=mess,
                          parse_mode='html', reply_markup=markup)


# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith('deleteart__'))
def cust_delartsql(call):
    delart = call.data.split("__")
    # userid = test_user(call.message.chat.id)
    sql.sql_delart(art=delart[1])
    mess = f'–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è {delart[2]} —É–¥–∞–ª–µ–Ω–∞!'
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é',
                                          callback_data=f'—Åust__chancat__{delart[3]}__{delart[4]}'))
    markup.add(types.InlineKeyboardButton(text='üîù –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='mainmenu'))
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=mess,
                          parse_mode='html', reply_markup=markup)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith('—Åust__dlcat__'))
def cust_delcat(call):
    delcat = call.data.split("__")
    mess = f'–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é {delcat[3]}?'
    markup = types.InlineKeyboardMarkup()
    da = types.InlineKeyboardButton(text='–î–∞', callback_data=f'deletecat__{delcat[2]}__{delcat[3]}')
    net = types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data=f'—Åustomiz')
    markup.add(da, net)
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=mess,
                          parse_mode='html', reply_markup=markup)


# –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith('deletecat__'))
def cust_delcatsql(call):
    delcat = call.data.split("__")
    userid = test_user(call.message.chat.id)
    sql.sql_delcat(userid=userid, cat=delcat[1])
    mess = f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è {delcat[2]} —É–¥–∞–ª–µ–Ω–∞!'
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', callback_data='—Åustomiz'))
    markup.add(types.InlineKeyboardButton(text='üîù –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='mainmenu'))
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=mess,
                          parse_mode='html', reply_markup=markup)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith('newart__'))
def newart(call):
    nwart = call.data.split("__")
    print(nwart)
    mess = f'–ê–ª–≥–æ—Ä–∏—Ç–º —Ç–µ–±–µ –∑–Ω–∞–∫–æ–º!\n–ù–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å.\n' \
           f'–ù–∞–ø—Ä–∏–º–µ—Ä:\n' \
           f'üõí –ü—Ä–æ–¥—É–∫—Ç—ã, üßæ –ö–æ–º. –ø–ª–∞—Ç–µ–∂–∏ –∏ —Ç.–¥'
    ctn = bot.send_message(call.message.chat.id, mess, parse_mode='html', reply_markup=None)
    bot.register_next_step_handler(ctn, inputart, nwart)


def inputart(message, value):
    nwart = value
    if message.content_type == 'text':
        nameart = message.text
        userid = test_user(message.from_user.id)
        print(nwart[1])
        artid = sql.sql_insert_art(nameart=nameart, namecat=nwart[1], userid=userid)
        mess = f'–î–æ–±–∞–≤–∏–ª –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é: {nameart} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {nwart[2]}!\n' \
               f'–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –≤–Ω–µ—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é.'
        markup = types.InlineKeyboardMarkup()
        print(f'art__{artid[0]}__{nameart}')
        markup.add(types.InlineKeyboardButton(text='–í–Ω–µ—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥', callback_data=f'art__{artid[0]}__{nameart}'))
        markup.add(
            types.InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é', callback_data=f'newart__{nwart[1]}__{nwart[2]}'))
        markup.add(types.InlineKeyboardButton(text='üîù –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='mainmenu'))
        bot.send_message(message.from_user.id, mess, reply_markup=markup)
    else:
        datt = bot.send_message(message.chat.id, '–ù–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è. –ù–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:')
        bot.register_next_step_handler(datt, inputart, nwart)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith('newc'))
def new_cat(call):
    mess = f'–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å.\n' \
           f'–í –∏–º–µ–Ω–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∂–∏.\n' \
           f'–ù–∞–ø—Ä–∏–º–µ—Ä:\nüè†–î–æ–º, üöô–ê–≤—Ç–æ–º–æ–±–∏–ª—å –∏ —Ç.–¥.\n'
    ctn = bot.send_message(call.message.chat.id, mess, parse_mode='html', reply_markup=None)
    bot.register_next_step_handler(ctn, input_cat)


def input_cat(message):
    if message.content_type == 'text':
        namecat = message.text
        userid = test_user(message.from_user.id)
        catid = sql.sql_insert_cat(namecat=namecat, userid=userid)
        print(catid[0], type(catid))
        mess = f'–û—Ç–ª–∏—á–Ω–æ, –∫–∞—Ç–µ–≥–æ—Ä–∏—é {namecat} —è –¥–æ–±–∞–≤–∏–ª!\n' \
               f'–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—ë —Ç—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—à—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.\n' \
               f'–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –¥–æ–±–∞–≤–∏–º –≤ –Ω–µ—ë –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:'
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é', callback_data=f'newart__{catid[0]}__{namecat}'))
        # markup.add(types.InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', callback_data='—Åustomiz'))
        markup.add(types.InlineKeyboardButton(text='üîù –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='mainmenu'))
        bot.send_message(message.from_user.id, mess, reply_markup=markup)
    else:
        datt = bot.send_message(message.chat.id, '–ù–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è. –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:')
        bot.register_next_step_handler(datt, input_cat)


# –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
@bot.callback_query_handler(func=lambda call: call.data.startswith('renamecat__'))
def rename_cat(call):
    cat = call.data.split("__")
    mess = '–ù–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:'
    ctn = bot.send_message(call.message.chat.id, mess, parse_mode='html', reply_markup=None)
    bot.register_next_step_handler(ctn, input_cat, cat)


def rename_cat_sql(message, value):
    cat = value
    if message.content_type == 'text':
        namecat = message.text
        userid = test_user(message.from_user.id)
        sql.sql_rename_cat(namecat=namecat, userid=userid, catid=cat[1])
        mess = f'–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ {namecat}\n–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?'
        print(mess)
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', callback_data='—Åustomiz'))
        markup.add(types.InlineKeyboardButton(text='üîù –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='mainmenu'))
        bot.send_message(message.from_user.id, mess, reply_markup=markup)
    else:
        datt = bot.send_message(message.chat.id, '–ù–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è. –ù–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:')
        bot.register_next_step_handler(datt, rename_cat_sql, cat)


# –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
@bot.callback_query_handler(func=lambda call: call.data.startswith('cat'))
def answer(call):
    catl = call.data.split("__")
    print('all= ' + call.data)
    print('obrez= ' + catl[1])
    mess = '–í—ã–±–µ—Ä–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:'
    userid = test_user(call.message.chat.id)
    art = sql.sql_takeart_list(userid=userid, cat=catl[1])
    markup = types.InlineKeyboardMarkup()
    if not art:
        mess = f'üòî–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!\n' \
               f'–ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞.'
        markup.add(types.InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é',
                                              callback_data=f'newart__{catl[1]}__{catl[2]}'))
    else:
        for row in art:
            markup.add(types.InlineKeyboardButton(text=row[1], callback_data=f'art__{row[0]}__{row[1]}'))
    markup.add(types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data=f'rasx'))
    bot.edit_message_text(chat_id=call.message.chat.id,
                          message_id=call.message.id, text=mess, parse_mode='html', reply_markup=markup)


# –§–∏–∫—Å–∏—Ä—É–µ–º —Ä–∞—Å—Ö–æ–¥
@bot.callback_query_handler(func=lambda call: call.data.startswith('art__'))
def answer(call):
    art = call.data.split("__")
    print('all= ' + call.data)
    mess = f'–ù–∞–ø–∏—à–∏ —Å—É–º–º—É –∑–∞—Ç—Ä–∞—Ç –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {art[2]}.\n–ß–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –º–æ–∂–µ—à—å —É–∫–∞–∑–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.'
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    but100 = types.InlineKeyboardButton(text='100')  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ —Å—É–º–º—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    but200 = types.InlineKeyboardButton(text='200')
    but500 = types.InlineKeyboardButton(text='500')
    markup.add(but100, but200, but500)
    datt = bot.send_message(call.message.chat.id, mess, parse_mode='html', reply_markup=markup)
    bot.register_next_step_handler(datt, input_rasx, art)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—É–º–º—ã —Ä–∞—Å—Ö–æ–¥–∞ –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
def input_rasx(message, value):
    art = value
    userid = test_user(message.from_user.id)
    summkomm = message.text
    summkomm = summkomm.split(" ", 1)
    print(summkomm)
    try:
        komm = summkomm[1]
    except IndexError:
        komm = ''
    if message.content_type == 'text' and summkomm[0].isdigit() and int(summkomm[0]) > 0:
        hide_markup = types.ReplyKeyboardRemove()
        bot.send_message(message.from_user.id, 'üëç', reply_markup=hide_markup)
        now = str(datetime.datetime.now())
        rash = sql.sql_insert_rashod(artid=art[1], userid=userid, summa=summkomm[0], datenow=now, komment=komm)
        mess = f'–î–æ–±–∞–≤–∏–ª {summkomm[0]}—Ä—É–±. –Ω–∞ {art[2]}.\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {komm}'
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
                                              callback_data=f'chanoneart__{rash[0]}__{rash[1]}__{rash[2]}'))
        markup.add(types.InlineKeyboardButton(text='üîù –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='mainmenu'))
        bot.send_message(message.from_user.id, mess, reply_markup=markup)
    else:
        datt = bot.send_message(message.chat.id,
                                '–°—É–º–º–∞ –¥–æ–ª–∂–µ–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ 0!'
                                ' –ß–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –º–æ–∂–µ—à—å —É–∫–∞–∑–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –ü–æ–≤—Ç–æ—Ä–∏ –≤–≤–æ–¥:')
        bot.register_next_step_handler(datt, input_rasx, art)


# –ó–∞–ø—É—Å–∫ \ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            time.sleep(3)
            print(str(e))
